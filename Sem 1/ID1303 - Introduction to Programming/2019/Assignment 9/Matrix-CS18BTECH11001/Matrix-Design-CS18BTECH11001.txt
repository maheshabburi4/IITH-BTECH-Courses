psuedo code :

matrixMultiplication(r1,c1,c2,A,B,C):
	for i from 0 to r1
		for j from 0 to c2
			c[i][j]=0
			for k from 0 to c1
				c[i][j]+=a[i][k]*b[k][i]
			print c[i][j] 

cofactor(n,A,temp,b,c):
	for i from 0 to n
		for j from 0 to n
			if i!=b&&j!=c
				temp[k][l++]=a[i][j]
				if l=n-1
					k++
					l=0 

determinant(n,A):
	if there is only one element
		return element
	for  int i from 0 to n
		cofactor(n,A,temp,0,i)
		D+=sign*A[0][i]*determinant(n-1,temp)
		sign=-sign
	return D

matrixInverse(n,C,D):
	d=determinant(n,C)
	if d=0
		print error
	else if n=1
		print 1/d
	else
		for i from 0 to n
			for j from 0 to n
				cofactor(n,C,temp,i,j)
				if i+j is even
					sign=1
				else
					sign=0
				D[j][i]=sign*determinant(n-1,temp)/d
		print Matrix D using loops 

main():
	do until c1==r1
		input order of Matrix A
		loop until r1>=2 and c1>=2
			print Error
			input order of MAtrix A
		input order of Matrix B
		loop until r2>=2 and c2>=2
			print Error
			input order of MAtrix B

	input elements into matrices using loops
	matrixMultiplication(r1,c1,c2,A,B,C)
	if r1=c2
		matrixInverse(r1,C,D)
	else
		print error

Design :
1.I used a do-while loop for running until user enter c1=r2,printing error and a while loop which runs until all the entered orders will be greater than 1 for each matrix,printing error.I used a flag variable to check whether the orders to be entered for the first time or not for printing error.if its first time then I would check the flag element to be 0 and not print the error. then i scanned elements into matrices
2.calling amtrixMultiplication function with A,B,C matrices as parameters for multipling A&B and storing the result in C as the matrices are passes by reference when given as parameters.
3.The element C[i][j] can be obtained by adding all the products of elements in "ith" row of A and "jth" coloumn of B.For calculating all the elements of C i used two for loops for iterating matrix C and an inner for loop for calculating sum of product for each element.
4.And then I check whether r1=c2 or not,if yes I perform matrixInverse function else print error.
5.In the matrixInverse function order n,matrix C,matrix D are passed as parameters.As the array is passed as parameter it is passed by reference.
6.I first find the det of matrix C by passing n,C as arguments to determinant function.if det=0 the matrix is singular and the inverse does not exist.do we print error.else if there is only one element in the matrix the Inverse will be reciprocal of that element.else for each element C[i][j] in C:
a)i find the cofactor matrix of C[i][j] using cofactor function by passing n,C,a temporary array(to store cofactor matrix),i,j
b)if i+j is even we assign sign =1 else -1
c)then we multiply the sign with det of cofctor matrix(calculated by calling the determinant function) dividing with det of C and assigning the total result to D[j][i]
7.for the determinant function order n,matrix C are passed as parameters.we check if there is only one element the det is equal to that element and we return that element else for each element in the first row(we can consider any row,for easy sake i considered first row) C[0][i]:
a)i find the cofactor matrix of C[0][i] using cofactor function by passing n,C,a temporary array(to store cofactor matrix),0,i
b)adding the product of sign and det of cofactor matrix(calculated by calling the determinant function) to the variable D
c)changing sign of sign variable by multipling with -1
8.for the cofactorMatrix function order n,A,a temporary array(to store cofactor matrix),b,c are passed as parameters.now for each element a[i][j] i check whether i=b or j=c(i.e.,the element a[i][j] is either in the same row or column of a[b][c]).if no i assign this value to temp matrix by increasing the column operator until n-1.if column operator=n-1 i increase row operator and set column operator to 0(beginning new row for temp array).