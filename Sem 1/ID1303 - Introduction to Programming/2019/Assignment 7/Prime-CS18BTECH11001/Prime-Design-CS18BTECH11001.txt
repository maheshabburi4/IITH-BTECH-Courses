1.I thought of storing the entered number as a string as it will be pretty much easy for the further computations.So, I have considered a character array(String) of size more than 10(100) as I can have input of more than 10 digits(for an invalid input) to avoid array overflow.
2.Then I check whether the length of string  is 10 or not using strlen() function of string.h header file.At the same time i also checked whether the given number is positive or not by checking whether it is neither negative(first character in the string would be '-'(minus)) nor zerp(The string would be "0000000000" and checked using strcmp() funtion of string.h header file)
3.If the above conditions are not satisfied I say the user that it is an invalid input.
4.if the conditions are satisfied I printed the returned value of sumOfPrimes(a,10,0).
5.The arguments of sum of primes containa a character array(Given number stored as string),index of character array(the current digit from start to be checked in the number),sum(sum of previous prime digits) and the return type is of int(as the maximum possible sum of prime digits of 10 digit number is 70(7777777777) and int is sufficient to store it).
6.while calling the funtion from main initially the index is 10.so the index value runs from 1-10.but the index in the string array runs from 0-9.so we considex index-1 while doing computations.
7.we check whether the current character(digit) is prime or not using a if condition. if prime we add the value of the digit(calculated by converting char into int which returns ascii value and by subtracting with 48(ascii value of 0)) to the sum.
then we again call sumOfPrimes function with the next index(index-1) and the updated sum as parameters.the function will be called recursively until the index in the parameter is equal to 0(which indicates all the digits have been computed).
if the index is 0 it returns the sum which is given as the parameter to the funtion which will be the final answer and returns that value.

psuedo code:
sumOfPrimes(a[],index,sum):
	If index is equal to zero
		Return (sum)
	else
		initialize ch to a[index-1]
		If ch is prime
			add value of ch to sum
		endif
		Return (sumOfPrimes(a,index-1,sum))
	endif

main():
	input the number as a string a[]
	if length of string not equal to 10 or first character of string is minus(-) or string is 0000000000
		Print Invalid input
	else
		Print sumOfPrimes(a,10,0)
	endif
	return (0)