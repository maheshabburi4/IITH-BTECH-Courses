1.I declared 4 arrays(a[],b[],c[],d[]) for Array 1,Array 2,Union,Intersection respectively and 2 variables(uSize,iSize) for storing size of union array,size of intersection array respectively.
2.I called scanArray function two times(1 for Array 1,1 for Array 2) with arguments input array,which array(1 for a[],2 for b[]).
3.In the scanArray function I scan elements one by one and for each element I compare with each of the previous elements and if already present I print "Error" and ask the user to enter other element and I again implemented the same process using a do-while loop until the entered element is non duplicate as there is no initial check.I considered a variable flag which represent whether the entered element is duplicate or not.And the final result of this function is it scan the elements and ask to enter other element if the entered element is duplicate.
4.Then I performed the unionSet function with arguments a[],b[],c[] which returns the size to be considered of updated Union array(c[]).(i.e., this function update the c[] and returns the size to be considered in that array).
5.In the unionSet function I initialize first 10 elements of c[] equal to the elements of a[] as all are distinct and to be considered in the Union array.I find the non common elements(using a flag variable which represent whether the element b[i] is present in a[] or not) of a[],b[] and add them to the uninon array with updating the size.And the final result of this function wull update the union array(c[]) and return the no of elements in the Union Array to be considered.
6.Then I performed the intersectionSet function with arguments a[],b[],d[] which returns the size to be considered of updated Intersection array(d[]).((i.e., this function update the d[] and returns the size to be considered in that array).
7.In the IntersectionSet function I find the common elements(by comparing each element of a[] with all the elements of the b[]) and add them to the d[] with updating the size.And the final result of this function will update the intersection Array(d[]) and return the no.of elements to be considered in that array.
8.Then I call the computation funtion two times(1 with arguments c[],uSize,1 with arguments d[],iSize).
9.In the computation function I first consider the size of given array(given as argument).if the size is 0(empty set) then the largest and second largest will be NULL.if the size is 1(singleton set) the Largest element will be the same element present in the array and the second largest element will be NULL.if the size is >1 i initialize two variables max and secMax to the min value that an int data type can hold using INT_MIN value included in limit.h header file.Then I iterated thought each element of the array and done the following computations.
a)if the value iterated element is greater than the value of max,I update the secMax to the present max and present max to the iterated element.
b)if the value of iterated element is in between max and secMax i update the secMax to the iterated element.
The final result of this funtion will give the max and SecMax element in the given array.

pseudo code :

scanArray(a[],index):
	for i from 0 to 9 
		input element as a[i]
		while the entered element is already present
			print Error...please enter unique element
			input element as a[i]

printArray(a[],size):
	if size equal to 0 
		print NULL
	else
		for i from 0 to size-1
			print a[i]

unionSet(a[],b[],c[]):
	for i from 0 to 9
		c[i]=a[i]
	for i from 0 to 9
		if b[i] not present in a[]
			c[size++]=b[i]
	Return (size)

intersectionSet(a[],b[],c[]):
	for i from 0 to 9
		if b[i] is present in a[]
			c[size++]=b[i]
	Return (size)

computation(a[],size):
	if size equal to 0
		print Largest=NULL,second largest=NULL
	if size equal to 1
		print Largest=a[0],second largest=NULL
	else
		max=INT_MIN,secMax=INT_MIN
		for i from 0 to size-1
			if a[i] is greater than max
				secMax=max
				max=a[i]
			if a[i] is in between max and secMax
				secMax=a[i]
		print Largest=max,second largest=secMax
		
main():
	scanArray(a,1)
	scanArray(b,1)
	uSize=unionSet(a,b,c)
	iSize=intersectionset(a,b,c)
	computation(c,uSize)
	computation(d,uSize)